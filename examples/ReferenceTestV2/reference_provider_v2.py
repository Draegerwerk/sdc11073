"""Implementation of reference provider.

The reference provider gets its parameters from environment variables:
- adapter_ip specifies which ip address shall be used
- ca_folder specifies where the communication certificates are located.
- ref_fac, ref_poc and ref_bed specify the location values facility, point of care and bed.
- ssl_passwd specifies an optional password for the certificates.

If a value is not provided as environment variable, the default value (see code below) will be used.
"""

from __future__ import annotations

import datetime
import json
import logging.config
import os
import traceback
from decimal import Decimal
from time import sleep
from uuid import UUID

from sdc11073.certloader import mk_ssl_contexts_from_folder
from sdc11073.location import SdcLocation
from sdc11073.loghelper import LoggerAdapter
from sdc11073.mdib import ProviderMdib, descriptorcontainers
from sdc11073.provider import SdcProvider
from sdc11073.provider import components
from sdc11073.provider.servicesfactory import DPWSHostedService
from sdc11073.provider.servicesfactory import HostedServices, mk_dpws_hosts
from sdc11073.provider.subscriptionmgr_async import SubscriptionsManagerReferenceParamAsync
from sdc11073.pysoap.soapclient_async import SoapClientAsync
from sdc11073.roles.waveformprovider import waveforms
from sdc11073.wsdiscovery import WSDiscovery
from sdc11073.xml_types import pm_types, pm_qnames
from sdc11073.xml_types.dpws_types import ThisDeviceType, ThisModelType

here = os.path.dirname(__file__)
default_mdib_path = os.path.join(here, 'mdib_test_sequence_2_v4(temp).xml')
mdib_path = os.getenv('ref_mdib') or default_mdib_path
xtra_log_config = os.getenv('ref_xtra_log_cnf')

My_UUID_str = '12345678-6f55-11ea-9697-123456789bcd'

# these variables define how the device is published on the network:
adapter_ip = os.getenv('ref_ip') or '127.0.0.1'
ca_folder = os.getenv('ref_ca')
ref_fac = os.getenv('ref_fac') or 'r_fac'
ref_poc = os.getenv('ref_poc') or 'r_poc'
ref_bed = os.getenv('ref_bed') or 'r_bed'
ssl_passwd = os.getenv('ref_ssl_passwd') or None

numeric_metric_handle = "numeric_metric_0.channel_0.vmd_0.mds_0"
string_metric_handle = "string_metric_0.channel_0.vmd_0.mds_0"
alert_condition_handle = "alert_condition_0.vmd_0.mds_1"
alert_signal_handle = "alert_signal_0.mds_0"
set_value_handle = "set_value_0.sco.mds_0"
set_string_handle = "set_string_0.sco.mds_0"
battery_handle = 'battery_0.mds_0'
vmd_handle = "vmd_0.mds_0"
mds_handle = "mds_0"
USE_REFERENCE_PARAMETERS = False

# some switches to enable/disable some of the provider data updates
# enabling allows to verify that the reference consumer detects missing updates

# 4 State Reports
# a) The Reference Provider produces at least 5 numeric metric updates in 30 seconds
# b) The Reference Provider produces at least 5 string metric updates (StringMetric or EnumStringMetric) in 30 seconds
# c) The Reference Provider produces at least 5 alert condition updates (AlertCondition or LimitAlertCondition) in 30 seconds
# d) The Reference Provider produces at least 5 alert signal updates in 30 seconds
# e) The Reference Provider provides alert system self checks in accordance to the periodicity defined in the MDIB (at least every 10 seconds)
# f) The Reference Provider provides 3 waveforms (RealTimeSampleArrayMetric) x 10 messages per second x 100 samples per message
# g) The Reference Provider provides changes for the following components:
#   * At least 5 Clock or Battery object updates in 30 seconds (Component report)
#   * At least 5 MDS or VMD updates in 30 seconds (Component report)
# g) The Reference Provider provides changes for the following operational states:
#    At least 5 Operation updates in 30 seconds; enable/disable operations; some different than the ones mentioned above (Operational State Report)"""
enable_4a = True
enable_4b = True
enable_4c = True
enable_4d = True
# switching 4e not implemented
enable_4f = True

# 5 Description Modifications:
# a) The Reference Provider produces at least 1 update every 10 seconds comprising
#     * Update Alert condition concept description of Type
#     * Update Alert condition cause-remedy information
#     * Update Unit of measure (metrics)
enable_5a1 = True
enable_5a2 = True
enable_5a3 = True

# 6 Operation invocation
# a) (removed)
# b) SetContextState:
#     * Payload: 1 Patient Context
#     * Context state is added to the MDIB including context association and validation
#     * If there is an associated context already, that context shall be disassociated
#         * Handle and version information is generated by the provider
#     * In order to avoid infinite growth of patient contexts, older contexts are allowed to be removed from the MDIB
#       (=ContextAssociation=No)
# c) SetValue: Immediately answers with "finished"
#     * Finished has to be sent as a report in addition to the response =>
# d) SetString: Initiates a transaction that sends Wait, Start and Finished
# e) SetMetricStates:
#     * Payload: 2 Metric States (settings; consider alert limits)
#     * Immediately sends finished
#     * Action: Alter values of metrics
enable_6c = True
enable_6d = True
enable_6e = True


def mk_all_services_except_localization(sdc_provider, components, subscription_managers) -> HostedServices:
    # register all services with their endpoint references acc. to structure in components
    dpws_services, services_by_name = mk_dpws_hosts(sdc_provider, components, DPWSHostedService, subscription_managers)
    hosted_services = HostedServices(dpws_services,
                                     services_by_name['GetService'],
                                     set_service=services_by_name.get('SetService'),
                                     context_service=services_by_name.get('ContextService'),
                                     description_event_service=services_by_name.get('DescriptionEventService'),
                                     state_event_service=services_by_name.get('StateEventService'),
                                     waveform_service=services_by_name.get('WaveformService'),
                                     containment_tree_service=services_by_name.get('ContainmentTreeService'),
                                     # localization_service=services_by_name.get('LocalizationService')
                                     )
    return hosted_services


def provide_realtime_data(sdc_provider):
    waveform_provider = sdc_provider.waveform_provider
    if waveform_provider is None:
        return
    mdib_waveforms = sdc_provider.mdib.descriptions.NODETYPE.get(pm_qnames.RealTimeSampleArrayMetricDescriptor)
    for waveform in mdib_waveforms:
        wf_generator = waveforms.SawtoothGenerator(min_value=0, max_value=10, waveform_period=1.1, sample_period=0.001)
        waveform_provider.register_waveform_generator(waveform.Handle, wf_generator)


if __name__ == '__main__':
    with open(os.path.join(here, 'logging_default.json')) as f:
        logging_setup = json.load(f)
    logging.config.dictConfig(logging_setup)
    if xtra_log_config is not None:
        with open(xtra_log_config) as f:
            logging_setup2 = json.load(f)
            logging.config.dictConfig(logging_setup2)

    logger = logging.getLogger('sdc')
    logger = LoggerAdapter(logger)
    logger.info('{}', 'start')
    wsd = WSDiscovery(adapter_ip)
    wsd.start()
    my_mdib = ProviderMdib.from_mdib_file(mdib_path)
    my_uuid = UUID(My_UUID_str)
    print("UUID for this device is {}".format(my_uuid))
    loc = SdcLocation(ref_fac, ref_poc, ref_bed)
    print("location for this device is {}".format(loc))
    dpwsModel = ThisModelType(manufacturer='sdc11073',
                              manufacturer_url='www.sdc11073.com',
                              model_name='TestDevice',
                              model_number='1.0',
                              model_url='www.sdc11073.com/model',
                              presentation_url='www.sdc11073.com/model/presentation')

    dpwsDevice = ThisDeviceType(friendly_name='TestDevice',
                                firmware_version='Version1',
                                serial_number='12345')
    if ca_folder:
        ssl_contexts = mk_ssl_contexts_from_folder(ca_folder,
                                                   private_key='user_private_key_encrypted.pem',
                                                   certificate='user_certificate_root_signed.pem',
                                                   ca_public_key='root_certificate.pem',
                                                   cyphers_file=None,
                                                   ssl_passwd=ssl_passwd)
    else:
        ssl_contexts = None
    if USE_REFERENCE_PARAMETERS:
        tmp = {'StateEvent': SubscriptionsManagerReferenceParamAsync}
        specific_components = components.SdcProviderComponents(
            subscriptions_manager_class=tmp,
            hosted_services={'Get': [components.GetService],
                             'StateEvent': [components.StateEventService,
                                            components.ContextService,
                                            components.DescriptionEventService,
                                            components.WaveformService],
                             'Set': [components.SetService],
                             'ContainmentTree': [components.ContainmentTreeService]},
            soap_client_class=SoapClientAsync)
    else:
        specific_components = components.SdcProviderComponents(
            hosted_services={'Get': [components.GetService],
                             'StateEvent': [components.StateEventService,
                                            components.ContextService,
                                            components.DescriptionEventService,
                                            components.WaveformService],
                             'Set': [components.SetService],
                             'ContainmentTree': [components.ContainmentTreeService]})
    sdc_provider = SdcProvider(wsd, dpwsModel, dpwsDevice, my_mdib, my_uuid,
                               ssl_context_container=ssl_contexts,
                               specific_components=specific_components,
                               max_subscription_duration=15
                               )
    sdc_provider.start_all()

    # disable delayed processing for 2 operations
    if enable_6c:
        sdc_provider.get_operation_by_handle('set_value_0.sco.mds_0').delayed_processing = False
    if not enable_6d:
        sdc_provider.get_operation_by_handle('set_string_0.sco.mds_0').delayed_processing = False
    if enable_6e:
        sdc_provider.get_operation_by_handle('set_metric_0.sco.vmd_1.mds_0').delayed_processing = False

    validators = [pm_types.InstanceIdentifier('Validator', extension_string='System')]
    sdc_provider.set_location(loc, validators)
    if enable_4f:
        provide_realtime_data(sdc_provider)
    pm = my_mdib.data_model.pm_names
    pm_types = my_mdib.data_model.pm_types
    patientDescriptorHandle = my_mdib.descriptions.NODETYPE.get(pm.PatientContextDescriptor)[0].Handle
    with my_mdib.context_state_transaction() as mgr:
        patientContainer = mgr.mk_context_state(patientDescriptorHandle)
        patientContainer.CoreData.Givenname = "Given"
        patientContainer.CoreData.Middlename = ["Middle"]
        patientContainer.CoreData.Familyname = "Familiy"
        patientContainer.CoreData.Birthname = "Birthname"
        patientContainer.CoreData.Title = "Title"
        patientContainer.ContextAssociation = pm_types.ContextAssociation.ASSOCIATED
        patientContainer.Validator.extend(validators)
        identifiers = []
        patientContainer.Identification = identifiers

    all_descriptors = list(sdc_provider.mdib.descriptions.objects)
    all_descriptors.sort(key=lambda x: x.Handle)
    numeric_metric = None
    string_metric = None
    alertCondition = None
    alertSignal = None
    battery_descriptor = None
    activateOperation = None
    stringOperation = None
    valueOperation = None

    # search for descriptors of specific types
    for one_descriptor in all_descriptors:
        if one_descriptor.Handle == numeric_metric_handle:
            numeric_metric = one_descriptor
        if one_descriptor.Handle == string_metric_handle:
            string_metric = one_descriptor
        if one_descriptor.Handle == alert_condition_handle:
            alertCondition = one_descriptor
        if one_descriptor.Handle == alert_signal_handle:
            alertSignal = one_descriptor
        if one_descriptor.Handle == battery_handle:
            battery_descriptor = one_descriptor
        if one_descriptor.Handle == set_value_handle:
            valueOperation = one_descriptor
        if one_descriptor.Handle == set_string_handle:
            stringOperation = one_descriptor

    with sdc_provider.mdib.metric_state_transaction() as mgr:
        state = mgr.get_state(valueOperation.OperationTarget)
        if not state.MetricValue:
            state.mk_metric_value()
        state = mgr.get_state(stringOperation.OperationTarget)
        if not state.MetricValue:
            state.mk_metric_value()
    print("Running forever, CTRL-C to  exit")
    try:
        str_current_value = 0
        while True:
            if numeric_metric:
                try:
                    if enable_4a:
                        with sdc_provider.mdib.metric_state_transaction() as mgr:
                            state = mgr.get_state(numeric_metric.Handle)
                            if not state.MetricValue:
                                state.mk_metric_value()
                            if state.MetricValue.Value is None:
                                state.MetricValue.Value = Decimal('0')
                            else:
                                state.MetricValue.Value += Decimal(1)
                    if enable_5a3:
                        with sdc_provider.mdib.descriptor_transaction() as mgr:
                            descriptor: descriptorcontainers.AbstractMetricDescriptorContainer = mgr.get_descriptor(
                                numeric_metric.Handle)
                            descriptor.Unit.Code = 'code1' if descriptor.Unit.Code == 'code2' else 'code2'
                except Exception as ex:
                    print(traceback.format_exc())
            else:
                print("Numeric Metric not found in MDIB!")
            if string_metric:
                try:
                    if enable_4b:
                        with sdc_provider.mdib.metric_state_transaction() as mgr:
                            state = mgr.get_state(string_metric.Handle)
                            if not state.MetricValue:
                                state.mk_metric_value()
                            state.MetricValue.Value = f'my string {str_current_value}'
                            str_current_value += 1
                except Exception as ex:
                    print(traceback.format_exc())
            else:
                print("Numeric Metric not found in MDIB!")

            if alertCondition:
                try:
                    if enable_4c:
                        with sdc_provider.mdib.alert_state_transaction() as mgr:
                            state = mgr.get_state(alertCondition.Handle)
                            state.Presence = not state.Presence
                except Exception as ex:
                    print(traceback.format_exc())
                try:
                    with sdc_provider.mdib.descriptor_transaction() as mgr:
                        now = datetime.datetime.now()
                        text = f'last changed at {now.hour:02d}:{now.minute:02d}:{now.second:02d}'
                        descriptor: descriptorcontainers.AlertConditionDescriptorContainer = mgr.get_descriptor(
                            alertCondition.Handle)
                        if enable_5a1:
                            if len(descriptor.Type.ConceptDescription) == 0:
                                descriptor.Type.ConceptDescription.append(pm_types.LocalizedText(text))
                            else:
                                descriptor.Type.ConceptDescription[0].text = text
                        if enable_5a2:
                            if len(descriptor.CauseInfo) == 0:
                                descriptor.CauseInfo.append(pm_types.CauseInfo())
                            if len(descriptor.CauseInfo[0].RemedyInfo.Description) == 0:
                                descriptor.CauseInfo[0].RemedyInfo.Description.append(pm_types.LocalizedText(text))
                            else:
                                descriptor.CauseInfo[0].RemedyInfo.Description[0].text = text
                except Exception as ex:
                    print(traceback.format_exc())

            else:
                print("Alert condition not found in MDIB")

            if alertSignal:
                try:
                    if enable_4d:
                        with sdc_provider.mdib.alert_state_transaction() as mgr:
                            state = mgr.get_state(alertSignal.Handle)
                            if state.Slot is None:
                                state.Slot = 1
                            else:
                                state.Slot += 1
                except Exception as ex:
                    print(traceback.format_exc())
            else:
                print("Alert signal not found in MDIB")

            if battery_descriptor:
                try:
                    with sdc_provider.mdib.component_state_transaction() as mgr:
                        state = mgr.get_state(battery_descriptor.Handle)
                        if state.Voltage is None:
                            state.Voltage = pm_types.Measurement(value=Decimal('14.4'), unit=pm_types.CodedValue('xyz'))
                        else:
                            state.Voltage.MeasuredValue += Decimal('0.1')
                        print(f'battery voltage = {state.Voltage.MeasuredValue}')
                except Exception as ex:
                    print(traceback.format_exc())
            else:
                print("battery state not found in MDIB")

            try:
                with sdc_provider.mdib.component_state_transaction() as mgr:
                    state = mgr.get_state(vmd_handle)
                    state.OperatingHours = 2 if state.OperatingHours != 2 else 1
                    print(f'operating hours = {state.OperatingHours}')
            except Exception as ex:
                print(traceback.format_exc())

            try:
                with sdc_provider.mdib.component_state_transaction() as mgr:
                    state = mgr.get_state(mds_handle)
                    state.Lang = 'de' if state.Lang != 'de' else 'en'
                    print(f'mds lang = {state.Lang}')
            except Exception as ex:
                print(traceback.format_exc())

            # add or rm vmd
            add_rm_metric_handle = 'add_rm_metric'
            add_rm_channel_handle = 'add_rm_channel'
            add_rm_vmd_handle = 'add_rm_vmd'
            add_rm_mds_handle = 'mds_0'
            vmd_descriptor = sdc_provider.mdib.descriptions.handle.get_one(add_rm_vmd_handle, allow_none=True)
            if vmd_descriptor is None:
                vmd = descriptorcontainers.VmdDescriptorContainer(add_rm_vmd_handle, add_rm_mds_handle)
                channel = descriptorcontainers.ChannelDescriptorContainer(add_rm_channel_handle, add_rm_vmd_handle)
                metric = descriptorcontainers.StringMetricDescriptorContainer(add_rm_metric_handle,
                                                                              add_rm_channel_handle)
                metric.Unit = pm_types.CodedValue('123')
                with sdc_provider.mdib.descriptor_transaction() as mgr:
                    mgr.add_descriptor(vmd)
                    mgr.add_descriptor(channel)
                    mgr.add_descriptor(metric)
                    mgr.add_state(sdc_provider.mdib.data_model.mk_state_container(vmd))
                    mgr.add_state(sdc_provider.mdib.data_model.mk_state_container(channel))
                    mgr.add_state(sdc_provider.mdib.data_model.mk_state_container(metric))
            else:
                with sdc_provider.mdib.descriptor_transaction() as mgr:
                    mgr.remove_descriptor(add_rm_vmd_handle)

            # enable disable operation
            with sdc_provider.mdib.operational_state_transaction() as mgr:
                op_state = mgr.get_state('activate_0.sco.mds_0')
                op_state.OperatingMode = pm_types.OperatingMode.ENABLED \
                    if op_state.OperatingMode == pm_types.OperatingMode.ENABLED \
                    else pm_types.OperatingMode.DISABLED
                print(f'operation activate_0.sco.mds_0 {op_state.OperatingMode}')

            sleep(5)
    except KeyboardInterrupt:
        print("Exiting...")
