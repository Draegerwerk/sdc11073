from lxml import etree as etree_

parser = etree_.ETCompatXMLParser(resolve_entities=False)

qn_complex_type = etree_.QName('http://www.w3.org/2001/XMLSchema', 'complexType')
qn_element = etree_.QName('http://www.w3.org/2001/XMLSchema', 'element')

def _generate_qnames(element, names, target_namespace):
    tag = etree_.QName(element.tag)
    if tag == qn_complex_type:
        name = element.attrib.get('name')
        if name:
            names[name] =  etree_.QName(target_namespace, name)
    elif tag == qn_element:
        name = element.attrib.get('name')
        if name:
            names[name] =  etree_.QName(target_namespace, name)
    for child in element:
        _generate_qnames(child, names, target_namespace)


def generate_qnames(doc):
    names = {}
    target_namespace = doc.attrib['targetNamespace']
    _generate_qnames(doc, names, target_namespace)
    return names

def write_names_file(names, ns_helper, func_name, fd):
    fd.write('# generated by "generate_qnames"\n' )
    fd.write(f'from .namespaces import {ns_helper}\n\n')
    fd.write('')
    names_list = [n.localname for n in names.values()]
    names_list.sort()
    for name in names_list:
        fd.write(f"{name} = {ns_helper}.{func_name}('{name}')\n")


if __name__ == '__main__':
    with open('../sdc11073/xsd/BICEPS_ParticipantModel.xsd', 'rb') as pm:
        xml_string = pm.read()
    doc_root = etree_.fromstring(xml_string, parser=parser)
    names = generate_qnames(doc_root)
    with open('../sdc11073/pm_qnames.py', 'w') as fd:
        write_names_file(names, 'default_ns_helper', 'domTag', fd)

    with open('../sdc11073/xsd/BICEPS_MessageModel.xsd', 'rb') as pm:
        xml_string = pm.read()
    doc_root = etree_.fromstring(xml_string, parser=parser)
    names = generate_qnames(doc_root)
    with open('../sdc11073/msg_qnames.py', 'w') as fd:
        write_names_file(names, 'default_ns_helper', 'msgTag', fd)

    with open('../sdc11073/xsd/Extensionpoint.xsd', 'rb') as pm:
        xml_string = pm.read()
    doc_root = etree_.fromstring(xml_string, parser=parser)
    names = generate_qnames(doc_root)
    with open('../sdc11073/ext_qnames.py', 'w') as fd:
        write_names_file(names, 'default_ns_helper', 'extTag', fd)
